name: Build and Release Extension

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
    paths-ignore:
      - 'docs/**'
  release:
    types:
      - created

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write # This permission is required for creating releases
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install dependencies
      run: npm install && npm ci
      
    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
    - name: Commit package-lock.json if changed
      run: |
        git add package-lock.json
        git diff --staged --quiet || git commit -m "Update package-lock.json [skip ci]"
        
    - name: Get package version
      id: get_version
      run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      
    - name: Create Release
      id: create_release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        
    - name: Publish
      if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'ubuntu-latest'
      run: npm run deploy
      env:
        VSCE_PAT: ${{ secrets.VSCE_TOKEN }}
      
    - name: Upload Release Asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./copilot-mcp-${{ steps.get_version.outputs.version }}.vsix
        asset_name: copilot-mcp-${{ steps.get_version.outputs.version }}.vsix
        asset_content_type: application/octet-stream 